{"version":3,"sources":["components/chart/Chart.js","components/form/Form.js","App.js","helper.js","serviceWorker.js","index.js"],"names":["Chart","chartData","worldPopulation","selectedYear","className","map","el","Country_Code","population","percentage","Math","round","key","Form","handleChange","yearList","value","onChange","id","i","App","useState","data","setData","setYearList","setSelectedYear","setChartData","setWorldPopulation","setInitialData","keys","Object","splice","years","join","split","filter","useEffect","axios","get","process","rep","result","getData","event","preventDefault","year","target","Country","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":";8VA6BeA,G,YA1BD,SAAH,GAAsD,IAAhDC,EAAS,EAATA,UAAWC,EAAe,EAAfA,gBAAiBC,EAAY,EAAZA,aAe3C,OACE,yBAAKC,UAAU,aACb,uBAAGA,UAAU,eAAc,sCACWD,EAAa,wCAGnD,4BAnBKF,EAAUI,KAAI,SAACC,GACpB,IAAQC,EAAiBD,EAAjBC,aACFC,EAAaF,EAAG,QAAD,OAASH,IACxBM,EAAaC,KAAKC,MAAOH,EAAaN,EAAmB,KAC/D,OACE,yBAAKE,UAAU,cAAcQ,IAAKL,GAChC,wBAAIH,UAAS,gCAA2BK,IACtC,0BAAML,UAAU,QAAM,UAAKG,aCgBxBM,G,MAzBF,SAAH,GAAkD,IAA5CV,EAAY,EAAZA,aAAcW,EAAY,EAAZA,aAAcC,EAAQ,EAARA,SAC1C,OACE,yBAAKX,UAAU,aACb,yBAAKA,UAAU,cACb,4BACEA,UAAU,eACVY,MAAOb,EACPc,SAAUH,EACVI,GAAG,QAEH,4BAAQF,MAAO,wBAAwB,wBAA6B,IACnED,EAASV,KAAI,SAACC,GACb,OACE,4BAAQF,UAAU,eAAeY,MAAOV,EAAIM,IAAKN,GAC9C,IACAA,EAAI,a,aCjBrB,kmGAAAa,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAMA,IAkEeC,EAlEH,WACV,MAAwBC,mBAAS,IAAG,mBAA7BC,EAAI,KAAEC,EAAO,KACpB,EAAgCF,mBAAS,IAAG,mBAArCN,EAAQ,KAAES,EAAW,KAC5B,EAAwCH,mBAAS,IAAG,mBAA7ClB,EAAY,KAAEsB,EAAe,KACpC,EAAkCJ,mBAAS,IAAG,mBAAvCpB,EAAS,KAAEyB,EAAY,KAC9B,EAA8CL,mBAAS,IAAG,mBAAnDnB,EAAe,KAAEyB,EAAkB,KAEpCC,EAAc,uCAAG,WAAON,GAAI,0EAC1BO,EAAOC,OAAOD,KAAKP,EAAK,KACzBS,OAAO,EAAG,GACTC,EAAQH,EACXI,KAAK,KACLC,MAAM,KACNC,QAAO,SAAC7B,GAAE,MAAY,SAAPA,KAClBkB,EAAYQ,GACZT,EAAQD,GAAM,2CACf,gBATmB,sCAuCpB,OATAc,qBAAU,YACK,uCAAG,sGACIC,IAAMC,IC9CPC,mMD8CoB,KAAD,EAA3B,OAAHC,EAAG,gBACYA,EAAIlB,KAAK,KAAD,EAAvBmB,EAAM,OACZb,EAAea,GAAQ,2CACxB,kBAJY,mCAKbC,KACC,IAGD,yBAAKtC,UAAU,OACb,kBAAC,EAAI,CACHD,aAAcA,EACdW,aAhCe,SAAC6B,GACpBA,EAAMC,iBACN,IACI1C,EADE2C,EAAOF,EAAMG,OAAO9B,MAEpBf,EAAYqB,EAAKjB,KAAI,SAACC,GAI1B,MAH2B,QAAvBA,EAAiB,eACnBJ,EAAkBI,EAAG,QAAD,OAASuC,KAExB,aACLE,QAASzC,EAAGyC,QACZxC,aAAcD,EAAGC,cAAY,eACpBsC,GAASvC,EAAG,QAAD,OAASuC,QAGjCpB,EAAgBoB,GAChBnB,EAAazB,GACb0B,EAAmBzB,IAiBfa,SAAUA,IAEXZ,GAAgBF,GAAaC,EAC5B,kBAAC,EAAK,CACJD,UAAWA,EACXC,gBAAiBA,EACjBC,aAAcA,IAGhB,KEvDY6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAU,KACf,kBAAC,EAAG,OAENC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.edc75941.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Chart.scss\";\n\nconst Chart = ({ chartData, worldPopulation, selectedYear }) => {\n  const chartDisplay = () => {\n    return chartData.map((el) => {\n      const { Country_Code } = el;\n      const population = el[`Year_${selectedYear}`];\n      const percentage = Math.round((population / worldPopulation) * 100);\n      return (\n        <div className=\"chart__list\" key={Country_Code}>\n          <dd className={`percentage percentage-${percentage}`}>\n            <span className=\"text\">{`${Country_Code}`}</span>\n          </dd>\n        </div>\n      );\n    });\n  };\n  return (\n    <div className=\"container\">\n      <p className=\"graph-title\">\n        Countries population percentage in {selectedYear} based on the world\n        (WLD) population\n      </p>\n      <dl>{chartDisplay()}</dl>\n    </div>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport \"./Form.scss\";\n\nconst Form = ({ selectedYear, handleChange, yearList }) => {\n  return (\n    <div className=\"container\">\n      <div className=\"form-group\">\n        <select\n          className=\"form-control\"\n          value={selectedYear}\n          onChange={handleChange}\n          id=\"year\"\n        >\n          <option value={\"Please select a year\"}>Please select a year</option>;\n          {yearList.map((el) => {\n            return (\n              <option className=\"list__option\" value={el} key={el}>\n                {\" \"}\n                {el}{\" \"}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.scss\";\nimport Chart from \"./components/chart/Chart\";\nimport Form from \"./components/form/Form\";\nimport { API_URL } from \"./helper\";\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [yearList, setYearList] = useState([]);\n  const [selectedYear, setSelectedYear] = useState(\"\");\n  const [chartData, setChartData] = useState([]);\n  const [worldPopulation, setWorldPopulation] = useState(\"\");\n\n  const setInitialData = async (data) => {\n    const keys = Object.keys(data[0]);\n    keys.splice(0, 2);\n    const years = keys\n      .join(\"_\")\n      .split(\"_\")\n      .filter((el) => el !== \"Year\");\n    setYearList(years);\n    setData(data);\n  };\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    const year = event.target.value;\n    let worldPopulation;\n    const chartData = data.map((el) => {\n      if (el[\"Country_Code\"] === \"WLD\") {\n        worldPopulation = el[`Year_${year}`];\n      }\n      return {\n        Country: el.Country,\n        Country_Code: el.Country_Code,\n        [`Year_${year}`]: el[`Year_${year}`],\n      };\n    });\n    setSelectedYear(year);\n    setChartData(chartData);\n    setWorldPopulation(worldPopulation);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const rep = await axios.get(API_URL);\n      const result = await rep.data;\n      setInitialData(result);\n    };\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Form\n        selectedYear={selectedYear}\n        handleChange={handleChange}\n        yearList={yearList}\n      />\n      {selectedYear && chartData && worldPopulation ? (\n        <Chart\n          chartData={chartData}\n          worldPopulation={worldPopulation}\n          selectedYear={selectedYear}\n        />\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","export const API_URL = process.env.REACT_APP_API_URL;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}